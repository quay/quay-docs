<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE book [
<!ENTITY % BOOK_ENTITIES SYSTEM "master.ent">
%BOOK_ENTITIES;
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<book version="5.0" xml:lang="en-US" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
	<?asciidoc-toc ?><?asciidoc-numbered ?>
	<info>
		<title>Deploy Red Hat Quay for proof-of-concept (non-production) purposes</title>
		<subtitle>Deploy Red Hat Quay</subtitle>
		 <date>2021-05-03</date>
		<productname>Red Hat Quay</productname>
		<productnumber>3.5</productnumber>
		<abstract>
			<para>
				Get started with Red Hat Quay
			</para>
		</abstract>
		<xi:include href="Author_Group.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		<xi:include href="Common_Content/Legal_Notice.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
	</info>
	<preface>
		<title>Preface</title>
		<simpara>
			Red Hat Quay is an enterprise-quality registry for building, securing and serving container images. This procedure describes how to deploy Red Hat Quay for proof-of-concept (non-production) purposes.
		</simpara>
	</preface>
	<chapter remap="_overview" xml:id="overview">
		<title>Overview</title>
		<simpara>
			Features of Red Hat Quay include:
		</simpara>
		<itemizedlist>
			<listitem>
				<simpara>
					High availability
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Geo-replication
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Repository mirroring
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Docker v2, schema 2 (multiarch) support
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Continuous integration
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Security scanning with Clair
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Custom log rotation
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Zero downtime garbage collection
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					24/7 support
				</simpara>
			</listitem>
		</itemizedlist>
		<simpara>
			Red Hat Quay provides support for:
		</simpara>
		<itemizedlist>
			<listitem>
				<simpara>
					Multiple authentication and access methods
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Multiple storage backends
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Custom certificates for Quay, Clair, and storage backends
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Application registries
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Different container image types
				</simpara>
			</listitem>
		</itemizedlist>
		<section remap="_architecture" xml:id="architecture">
			<title>Architecture</title>
			<simpara>
				Red Hat Quay consists of a number of core components, both internal and external.
			</simpara>
			<section remap="_internal_components" xml:id="internal_components">
				<title>Internal components</title>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Quay (container registry)</emphasis>: Runs the quay container as a service, consisting of several components in the pod.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Clair</emphasis>: Scans container images for vulnerabilities and suggests fixes.
						</simpara>
					</listitem>
				</itemizedlist>
			</section>
			<section remap="_external_components" xml:id="external_components">
				<title>External components</title>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Database</emphasis>: Used by Red Hat Quay as its primary metadata storage (not for image storage).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Redis (key-value store)</emphasis>: Stores live builder logs and the Red Hat Quay tutorial.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Cloud storage</emphasis>:For supported deployments, you need to use one of the following types of storage:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Public cloud storage</emphasis>: In public cloud environments, you should use the cloud provider’s object storage, such as Amazon S3 (for AWS) or Google Cloud Storage (for Google Cloud).
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Private cloud storage</emphasis>: In private clouds, an S3 or Swift compliant Object Store is needed, such as Ceph RADOS, or OpenStack Swift.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</itemizedlist>
				<warning>
					<simpara>
						Do not use "Locally mounted directory" Storage Engine for any production configurations. Mounted NFS volumes are not supported. Local storage is meant for Red Hat Quay test-only installations.
					</simpara>
				</warning>
			</section>
		</section>
	</chapter>
	<chapter remap="_getting_started_with_red_hat_quay" xml:id="getting_started_with_red_hat_quay">
		<title>Getting started with Red Hat Quay</title>
		<simpara>
			The Red Hat Quay registry can be deployed for non-production purposes on a single machine (either physical or virtual) with the following specifications.
		</simpara>
		<section remap="_prerequisites" xml:id="prerequisites">
			<title>Prerequisites</title>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis role="strong">Red Hat Enterprise Linux (RHEL)</emphasis>: Obtain the latest Red Hat Enterprise Linux 8 server media from the <link xlink:href="https://access.redhat.com/downloads/content/479/ver=/rhel---8/8.3/x86_64/product-software">Downloads page</link> and follow the installation instructions available in the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/">Product Documentation for Red Hat Enterprise Linux 8</link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Valid Red Hat Subscription</emphasis>: Configure a valid Red Hat Enterprise Linux 8 server subscription.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">CPUs</emphasis>: Two or more virtual CPUs
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">RAM</emphasis>: 4GB or more
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Disk space</emphasis>: The required disk space depends on the storage needs for the registry. Approximately 30GB of disk space should be enough for a test system, broken down as follows:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								At least 10GB of disk space for the operating system (Red Hat Enterprise Linux Server).
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								At least 10GB of disk space for docker storage (to run 3 containers)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								At least 10GB of disk space for Quay local storage (CEPH or other local storage might require more memory)
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
			<simpara>
				More information on sizing can be found at <link xlink:href="https://access.redhat.com/articles/5177961">Quay 3.x Sizing Guidlines</link>.
			</simpara>
			<section remap="_using_podman" xml:id="using_podman">
				<title>Using podman</title>
				<simpara>
					This document uses <literal>podman</literal> for creating and deploying containers. If you do not have <literal>podman</literal> installed on your system, you should be able to use the equivalent <literal>docker</literal> commands. For more information on podman and related technologies, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/building_running_and_managing_containers/index">Building, running, and managing Linux containers on Red Hat Enterprise Linux 8</link>.
				</simpara>
			</section>
		</section>
		<section remap="_configuring_the_rhel_server" xml:id="configuring_the_rhel_server">
			<title>Configuring the RHEL server</title>
			<section remap="_install_and_register_red_hat_enterprise_linux_server" xml:id="install_and_register_red_hat_enterprise_linux_server">
				<title>Install and register Red Hat Enterprise Linux server</title>
				<simpara>
					Install the latest RHEL 8 server. You can do a minimal install (shell access only) or Server plus GUI (if you want a desktop). Register and subscribe your RHEL server system as described in <link xlink:href="https://access.redhat.com/solutions/253273">How to register and subscribe a system…​</link>. The following commands register your system and list available subscriptions. Choose an available RHEL server subscription, attach to its pool ID and upgrade to the latest software:
				</simpara>
				<simpara>
					+
				</simpara>
				
<literallayout class="monospaced"># subscription-manager register --username=&lt;user_name&gt; --password=&lt;password&gt;
# subscription-manager refresh
# subscription-manager list --available
# subscription-manager attach --pool=&lt;pool_id&gt;
# yum update -y</literallayout>
			</section>
			<section remap="_installing_podman" xml:id="installing_podman">
				<title>Installing podman</title>
				<simpara>
					Install podman, if it is not already present on your system:
				</simpara>
				
<literallayout class="monospaced">$ sudo yum install -y podman</literallayout>
				<simpara>
					Alternatively, you can install the <literal>container-tools</literal> module, which pulls in the full set of container software packages:
				</simpara>
				
<literallayout class="monospaced">$ sudo yum module install -y container-tools</literallayout>
			</section>
			<section remap="_registry_authentication" xml:id="registry_authentication">
				<title>Registry authentication</title>
				<simpara>
					Set up authentication to <literal>registry.redhat.io</literal>, so that you can pull the quay container, as described in <link xlink:href="https://access.redhat.com/RegistryAuthentication">Red Hat Container Registry Authentication</link>. Note that this differs from earlier Red Hat Quay releases where the images were hosted on quay.io.
				</simpara>
				<simpara>
					For example, you can log in to the registry:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman login registry.redhat.io
Username: &lt;username&gt;
Password: &lt;password&gt;</literallayout>
			</section>
			<section remap="_firewall_configuration" xml:id="firewall_configuration">
				<title>Firewall configuration</title>
				<simpara>
					If you have a firewall running on your system, to access the Red Hat Quay config tool (port 8443) and application (ports 8080 and 443) outside of the local system, run the following commands (add <literal>--zone=&lt;yourzone&gt;</literal> for each command to open ports on a particular zone):
				</simpara>
				
<literallayout class="monospaced"># firewall-cmd --permanent --add-port=8443/tcp
# firewall-cmd --permanent --add-port=8080/tcp
# firewall-cmd --permanent --add-port=443/tcp
# firewall-cmd --reload</literallayout>
			</section>
			<section xml:id="ip-naming">
				<title>IP addressing and naming services</title>
				<simpara>
					There are a number of ways to configure the component containers in Red Hat Quay so that they can talk to each other:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Using the IP addresses for the containers:</emphasis> You can determine the IP address for containers with <literal>podman inspect</literal> and then use these values in the configuration tool when specifying the connection strings, for example:
						</simpara>
						
<literallayout class="monospaced">$ sudo podman inspect -f "{{.NetworkSettings.IPAddress}}" postgresql-quay</literallayout>
						<simpara>
							This approach is susceptible to host restarts, as the IP addresses for the containers will change after a reboot.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Using a naming service:</emphasis> If you want your deployment to survive container restarts, which typically result in changed IP addresses, you can implement a naming service. For example, the <link xlink:href="https://github.com/containers/dnsname">dnsname</link> plugin is used to allow containers to resolve each other by name.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Using the host network:</emphasis> You can use the <literal>podman run</literal> command with the <literal>--net=host</literal> option and then use container ports on the host when specifying the addresses in the configuration. This option is susceptible to port conflicts when two containers want to use the same port, and as a result it is not recommended.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Configuring port mapping:</emphasis> You can use port mappings to expose ports on the host and then use these ports in combination with the host IP address or host name.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					This document uses port mapping in the subsequent examples, and assumes a static IP address for your host system. In this example, <literal>quay-server</literal> has the IP address <literal>192.168.1.112</literal>.
				</simpara>
				
<literallayout class="monospaced">$ cat /etc/hosts
...
192.168.1.112   quay-server</literallayout>
				<informaltable colsep="1" frame="all" rowsep="1">
					<tgroup cols="3">
						<colspec colname="col_1" colwidth="50*"></colspec>
						<colspec colname="col_2" colwidth="25*"></colspec>
						<colspec colname="col_3" colwidth="25*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Component</entry>
								<entry align="left" valign="top">Port mapping</entry>
								<entry align="left" valign="top">Address</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Quay
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-p 8080:8080</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									http://quay-server:8080
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Postgres for Quay
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-p 5432:5432</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									quay-server:5432
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Redis
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-p 6379:6379</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									quay-server:6379
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Postgres for Clair V4
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-p 5433:5432</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									quay-server:5433
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Clair V4
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-p 8081:8080</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									http://quay-server:8081
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
			</section>
		</section>
		<section remap="_configuring_the_database" xml:id="configuring_the_database">
			<title>Configuring the database</title>
			<simpara>
				Quay requires a database for storing metadata and Postgres is recommended, especially for highly available configurations. Alternatively, you can use MySQL with a similar approach to configuration as described below for Postgres.
			</simpara>
			<section remap="_setting_up_postgres" xml:id="setting_up_postgres">
				<title>Setting up Postgres</title>
				<simpara>
					In this proof-of-concept scenario, you will use a directory on the local file system to persist database data.
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							In the installation folder, denoted here by the variable $QUAY, create a directory for the database data and set the permissions appropriately:
						</simpara>
						
<literallayout class="monospaced">$ mkdir -p $QUAY/postgres-quay
$ setfacl -m u:26:-wx $QUAY/postgres-quay</literallayout>
					</listitem>
					<listitem>
						<simpara>
							Use podman to run the Postgres container, specifying the username, password, database name and port, together with the volume definition for database data:
						</simpara>
						
<literallayout class="monospaced">$ sudo podman run -d --rm --name postgresql-quay \
  -e POSTGRESQL_USER=quayuser \
  -e POSTGRESQL_PASSWORD=quaypass \
  -e POSTGRESQL_DATABASE=quay \
  -e POSTGRESQL_ADMIN_PASSWORD=adminpass \
  -p 5432:5432 \
  -v $QUAY/postgres-quay:/var/lib/pgsql/data:Z \
  registry.redhat.io/rhel8/postgresql-10:1</literallayout>
					</listitem>
					<listitem>
						<simpara>
							Ensure that the Postgres <literal>pg_trgm</literal> module is installed, as it is required by Quay:
						</simpara>
						
<literallayout class="monospaced">$ sudo podman exec -it postgresql-quay /bin/bash -c 'echo "CREATE EXTENSION IF NOT EXISTS pg_trgm" | psql -d quay -U postgres'</literallayout>
					</listitem>
				</itemizedlist>
			</section>
		</section>
		<section remap="_configuring_redis" xml:id="configuring_redis">
			<title>Configuring Redis</title>
			<simpara>
				Redis ia a key-value store, used by Quay for live builder logs and the Red Hat Quay tutorial.
			</simpara>
			<section remap="_setting_up_redis" xml:id="setting_up_redis">
				<title>Setting up Redis</title>
				<simpara>
					Use podman to run the Redis container, specifying the port and password:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman run -d --rm --name redis \
  -p 6379:6379 \
  -e REDIS_PASSWORD=strongpassword \
  registry.redhat.io/rhel8/redis-5:1</literallayout>
			</section>
		</section>
		<section remap="_configuring_red_hat_quay" xml:id="configuring_red_hat_quay">
			<title>Configuring Red Hat Quay</title>
			<simpara>
				Before running the Red Hat Quay service, you need to generate a configuration file containing details of all the components, including registry settings, and database and Redis connection parameters. To generate the configuration file, you run the quay container in <literal>config</literal> mode, specifying a password (in this instance, <literal>secret</literal>) for the <literal>quayconfig</literal> user:
			</simpara>
			
<literallayout class="monospaced">$ sudo podman run --rm -it --name quay_config -p 8080:8080 registry.redhat.io/quay/quay-rhel8:v3.5.1 config secret</literallayout>
			<simpara>
				Use your browser to access the user interface for the configuration tool at <literal>http://quay-server:8080</literal> (assuming you have configured the <literal>quay-server</literal> hostname in your <literal>hosts</literal> file). Login with the username <literal>quayconfig</literal> and password <literal>secret</literal> (or whatever value you specified in the podman run command above).
			</simpara>
			<section remap="_red_hat_quay_setup" xml:id="red_hat_quay_setup">
				<title>Red Hat Quay setup</title>
				<simpara>
					In the configuration editor, you enter details for the following:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Basic configuration
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Server configuration
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Database
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Redis
						</simpara>
					</listitem>
				</itemizedlist>
				<section remap="_basic_configuration" xml:id="basic_configuration">
					<title>Basic configuration</title>
					<simpara>
						In the basic configuration setting, complete the registry title and the registry short title fields (or you can use the default values, if they are specified).
					</simpara>
				</section>
				<section remap="_server_configuration" xml:id="server_configuration">
					<title>Server configuration</title>
					<simpara>
						Specify the HTTP host and port, for the location where the registry will be accessible on the network, in this instance, <literal>quay-server:8080</literal>.
					</simpara>
				</section>
				<section remap="_database" xml:id="database">
					<title>Database</title>
					<simpara>
						In the database section, specify connection details for the database that Red Hat Quay uses to store metadata. If you followed the instructions in this document for deploying a proof-of-concept system, the following values would be entered:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">Database Type:</emphasis> Postgres
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Database Server:</emphasis> quay-server:5432
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Username:</emphasis> quayuser
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Password:</emphasis> quaypass
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Database Name:</emphasis> quay
							</simpara>
						</listitem>
					</itemizedlist>
				</section>
				<section remap="_redis" xml:id="redis">
					<title>Redis</title>
					<simpara>
						The Redis key-value store is used to store real-time events and build logs. If you followed the instructions in this document for deploying a proof-of-concept system, the following values would be specified:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">Redis Hostname:</emphasis> quay-server
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Redis port:</emphasis> 6379 (default)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Redis password:</emphasis> strongpassword
							</simpara>
						</listitem>
					</itemizedlist>
				</section>
			</section>
			<section remap="_validate_and_download_configuration" xml:id="validate_and_download_configuration">
				<title>Validate and download configuration</title>
				<simpara>
					When all required fields have been set, validate your settings by choosing the Validate Configuration Changes button. If any errors are reported, continue editing your configuration until all required fields are valid and Red Hat Quay can connect to your database and Redis servers.
				</simpara>
				<simpara>
					Once your configuration is valid, download the configuration file and then stop the quay container that is running the configuration editor.
				</simpara>
			</section>
		</section>
		<section remap="_deploying_red_hat_quay" xml:id="deploying_red_hat_quay">
			<title>Deploying Red Hat Quay</title>
			<section remap="_prerequisites_2" xml:id="prerequisites_2">
				<title>Prerequisites</title>
				<itemizedlist>
					<listitem>
						<simpara>
							Your Quay database and Redis servers are running.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You have generated a valid configuration bundle.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You have stopped the Quay container that you used to run the configuration editor.
						</simpara>
					</listitem>
				</itemizedlist>
			</section>
			<section remap="_prepare_config_folder" xml:id="prepare_config_folder">
				<title>Prepare config folder</title>
				<simpara>
					Unpack the configuration bundle so that Quay can use it, for example:
				</simpara>
				
<literallayout class="monospaced">$ mkdir $QUAY/config
$ cp ~/Downloads/quay-config.tar.gz $QUAY/config
$ cd $QUAY/config
$ tar xvf quay-config.tar.gz</literallayout>
			</section>
			<section remap="_prepare_local_storage_for_image_data" xml:id="prepare_local_storage_for_image_data">
				<title>Prepare local storage for image data</title>
				<simpara>
					In this proof-of-concept deployment, use the local file system to store the registry images:
				</simpara>
				
<literallayout class="monospaced">$ mkdir $QUAY/storage
$ setfacl -m u:1001:-wx $QUAY/storage</literallayout>
			</section>
			<section remap="_deploy_the_red_hat_quay_registry" xml:id="deploy_the_red_hat_quay_registry">
				<title>Deploy the Red Hat Quay registry</title>
				<simpara>
					Use podman to run the quay container, specifying the appropriate volumes for your configuration data and local storage for image data:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman run -d --rm -p 8080:8080  \
   --name=quay \
   -v $QUAY/config:/conf/stack:Z \
   -v $QUAY/storage:/datastorage:Z \
   registry.redhat.io/quay/quay-rhel8:v3.5.1</literallayout>
			</section>
		</section>
		<section remap="_using_red_hat_quay" xml:id="using_red_hat_quay">
			<title>Using Red Hat Quay</title>
			<simpara>
				Use your browser to access the user interface for the Red Hat Quay registry at <literal>quay-server:8080</literal> (assuming you have configured the <literal>quay-server</literal> hostname in your <literal>hosts</literal> file). Select 'Create Account' and add a user, for example, <literal>quayadmin</literal> with a password <literal>password</literal>.
			</simpara>
			<simpara>
				You can now use the user interface to create new organizations and repositories, and to search and browse existing repositories. Alternatively, you can use the command line interface to interact with the registry and to pull and push images.
			</simpara>
			<simpara>
				From the command line, log in to the registry:
			</simpara>
			
<literallayout class="monospaced">$ sudo podman login --tls-verify=false quay-server:8080
Username: quayadmin
Password:
Login Succeeded!</literallayout>
			<section remap="_push_and_pull_images" xml:id="push_and_pull_images">
				<title>Push and pull images</title>
				<simpara>
					To test pushing and pulling images from the Red Hat Quay registry, first pull a sample image from an external registry:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman pull busybox
Trying to pull docker.io/library/busybox...
Getting image source signatures
Copying blob 4c892f00285e done
Copying config 22667f5368 done
Writing manifest to image destination
Storing signatures
22667f53682a2920948d19c7133ab1c9c3f745805c14125859d20cede07f11f9</literallayout>
				<simpara>
					Use the <literal>podman images</literal> command to see the local copy:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman images
REPOSITORY                          TAG      IMAGE ID       CREATED         SIZE
docker.io/library/busybox           latest   22667f53682a   14 hours ago    1.45 MB
...</literallayout>
				<simpara>
					Tag this image, in preparation for pushing it to the Red Hat Quay registry:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman tag docker.io/library/busybox quay-server:8080/quayadmin/busybox:test</literallayout>
				<simpara>
					Now push the image to the Red Hat Quay registry:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman push --tls-verify=false quay-server:8080/quayadmin/busybox:test
Getting image source signatures
Copying blob 6b245f040973 done
Copying config 22667f5368 done
Writing manifest to image destination
Storing signatures</literallayout>
				<simpara>
					At this point, you can use your browser to see the tagged image in your repository. To test access to the image from the command line, first delete the local copy of the image:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman rmi quay-server:8080/quayadmin/busybox:test
Untagged: quay-server:8080/quayadmin/busybox:test</literallayout>
				<simpara>
					Now pull the image again, this time from your Red Hat Quay registry:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman pull --tls-verify=false quay-server:8080/quayadmin/busybox:test
Trying to pull quay-server:8080/quayadmin/busybox:test...
Getting image source signatures
Copying blob 6ef22a7134ba [--------------------------------------] 0.0b / 0.0b
Copying config 22667f5368 done
Writing manifest to image destination
Storing signatures
22667f53682a2920948d19c7133ab1c9c3f745805c14125859d20cede07f11f9</literallayout>
			</section>
		</section>
	</chapter>
	<chapter remap="_advanced_red_hat_quay_deployment" xml:id="advanced_red_hat_quay_deployment">
		<title>Advanced Red Hat Quay deployment</title>
		<section remap="_quay_superuser" xml:id="quay_superuser">
			<title>Quay superuser</title>
			<simpara>
				A <literal>superuser</literal> is a Quay user account that has extended privileges, including the ability to:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Manage users
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Manage organizations
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Manage service keys
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						View the change log
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Query the usage logs
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Create globally visible user messages
					</simpara>
				</listitem>
			</itemizedlist>
			<section remap="_adding_a_superuser_to_quay_using_the_ui" xml:id="adding_a_superuser_to_quay_using_the_ui">
				<title>Adding a superuser to Quay using the UI</title>
				<simpara>
					Stop the Quay registry if it is running, and restart the container in configuration mode, loading the existing configuration as a volume:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman run --rm -it --name quay_config \
  -p 8080:8080 \
  -v $QUAY/config:/conf/stack:Z \
  registry.redhat.io/quay/quay-rhel8:v3.5.1 config secret</literallayout>
				<simpara>
					In the Access Settings section of the UI, enter the name of the user (in this instance, <literal>quayadmin</literal>) in the Super Users field and press Add.
				</simpara>
				<simpara>
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="images/add-superuser.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>Configuring a sueruser</phrase>
						</textobject>
					</inlinemediaobject>
				</simpara>
				<simpara>
					Validate and download the configuration bundle and then terminate the Quay container that is running in config mode. Extract the <literal>config.yaml</literal> file to the configuration directory and restart the Quay container in registry mode.
				</simpara>
			</section>
			<section remap="_editing_the_config_yaml_file_to_add_a_superuser" xml:id="editing_the_config_yaml_file_to_add_a_superuser">
				<title>Editing the config.yaml file to add a superuser</title>
				<simpara>
					You can also add a superuser by editing the <literal>config.yaml</literal> file directly. The list of superuser accounts is stored as an array in the field <literal>SUPER_USERS</literal>:
				</simpara>
				<formalpara>
					<title>$QUAY/config/config.yaml</title>
					<para>
						
<programlisting language="yaml" linenumbering="unnumbered">SERVER_HOSTNAME: quay-server:8080
SETUP_COMPLETE: true
SUPER_USERS:
  - quayadmin
...</programlisting>
					</para>
				</formalpara>
			</section>
			<section remap="_accessing_the_superuser_admin_panel" xml:id="accessing_the_superuser_admin_panel">
				<title>Accessing the superuser admin panel</title>
				<simpara>
					To access the Super User Admin Panel, click on the current user’s name or avatar in the top right-hand corner of the UI. If the user has been added as a superuser, an extra item is presented in the drop-down list called Super User Admin Panel.
				</simpara>
				<simpara>
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="images/super-user-admin-panel.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>Super User Admin Panel</phrase>
						</textobject>
					</inlinemediaobject>
				</simpara>
			</section>
		</section>
		<section remap="_repository_mirroring" xml:id="repository_mirroring">
			<title>Repository Mirroring</title>
			<section xml:id="repo-mirroring-in-red-hat-quay">
				<title>Introduction to repository mirroring in Red Hat Quay</title>
				<simpara>
					Red Hat Quay repository mirroring lets you mirror images from external container registries (or another local registry) into your Red Hat Quay cluster. Using repository mirroring, you can synchronize images to Red Hat Quay based on repository names and tags.
				</simpara>
				<simpara>
					From your Red Hat Quay cluster with repository mirroring enabled, you can:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Choose a repository from an external registry to mirror
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Add credentials to access the external registry
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Identify specific container image repository names and tags to sync
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Set intervals at which a repository is synced
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Check the current state of synchronization
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					To use the mirroring functionality, you need to:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Enable Repository Mirroring in the Red Hat Quay configuration tool
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Run a repository mirroring worker
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Create mirrored repositories in the Red Hat Quay UI
						</simpara>
					</listitem>
				</itemizedlist>
			</section>
			<section remap="_mirroring_configuration" xml:id="mirroring_configuration">
				<title>Mirroring configuration</title>
				<simpara>
					Start the Quay container in configuration mode and select the Enable Repository Mirroring check box. If you want to require HTTPS communications and verify certificates during mirroring, select the HTTPS and cert verification check box.
				</simpara>
				<simpara>
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="images/repo_mirror_config.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>Enable mirroring and require HTTPS and verified certificates</phrase>
						</textobject>
					</inlinemediaobject>
				</simpara>
				<simpara>
					Validate and download the configuration, and then restart Quay in registry mode, using the updated config file.
				</simpara>
			</section>
			<section remap="_mirroring_worker" xml:id="mirroring_worker">
				<title>Mirroring worker</title>
				<simpara>
					To run the repository mirroring worker, start a quay pod with the <literal>repomirror</literal> option:
				</simpara>
				
<screen>$ sudo podman run -d --name mirroring-worker \
  -v $QUAY/config:/conf/stack \
  registry.redhat.io/quay/quay-rhel8:v3.5.1 repomirror</screen>
				<simpara>
					If you have configured TLS communications using a certificate <literal>/root/ca.crt</literal>, then the following example shows how to start the mirroring worker:
				</simpara>
				
<screen>$ sudo podman run -d --name mirroring-worker \
  -v $QUAY/config:/conf/stack \
  -v /root/ca.crt:/etc/pki/ca-trust/source/anchors/ca.crt \
  registry.redhat.io/quay/quay-rhel8:v3.5.1 repomirror</screen>
			</section>
			<section xml:id="create-mirrored-repo">
				<title>Creating a mirrored repository</title>
				<simpara>
					The steps shown in this section assume you already have enabled repository mirroring in the configuration for your Red Hat Quay cluster and that you have a deployed a mirroring worker.
				</simpara>
				<simpara>
					To mirror a repository from an external container registry, create a new repository, typically with the same name as the target repo, for example, <literal>quay-rhel8</literal>.
				</simpara>
				<section remap="_repository_mirroring_settings" xml:id="repository_mirroring_settings">
					<title>Repository mirroring settings</title>
					<simpara>
						In the Settings tab, set the Repository State to <literal>Mirror</literal>:
					</simpara>
					<simpara>
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/repo_mirror_create.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Create a new Red Hat Quay repo mirror</phrase>
							</textobject>
						</inlinemediaobject>
					</simpara>
					<simpara>
						In the Mirror tab, enter the details for connecting to the external registry, along with the tags, scheduling and access information.
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">Registry Location:</emphasis> The external repository you want to mirror, for example, <literal>registry.redhat.io/quay/quay-rhel8</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Tags:</emphasis> This field is required. You may enter a comma-separated list of individual tags or tag patterns. (See <emphasis>Tag Patterns</emphasis> section for details.)
							</simpara>
							<note>
								<simpara>
									In order for Quay to get the list of tags in the remote repository, one of the following requirements must be met:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											An image with the "latest" tag must exist in the remote repository <emphasis>OR</emphasis>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											At least one explicit tag, without pattern matching, must exist in the list of tags that you specify
										</simpara>
									</listitem>
								</itemizedlist>
							</note>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Start Date:</emphasis> The date on which mirroring begins. The current date and time is used by default.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Sync Interval:</emphasis> Defaults to syncing every 24 hours. You can change that based on hours or days.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Robot User:</emphasis> Create a new robot account or choose an existing robot account to do the mirroring.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Username:</emphasis> The username for accessing the external registry holding the repository you are mirroring.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Password:</emphasis> The password associated with the Username. Note that the password cannot include characters that require an escape character (\).
							</simpara>
						</listitem>
					</itemizedlist>
				</section>
				<section remap="_advanced_settings" xml:id="advanced_settings">
					<title>Advanced settings</title>
					<simpara>
						In the Advanced Settings section, configure TLS and proxy, if required:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">Verify TLS:</emphasis> Check this box if you want to verify the authenticity of the external registry. Uncheck this box if, for example, you set up Red Hat Quay for testing with a self-signed certificate or no certificate.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">HTTP Proxy:</emphasis> Identify the HTTP proxy server needed to access the remote site, if one is required.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">HTTPS Proxy:</emphasis> Identify the HTTPS proxy server needed to access the remote site, if one is required.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">No Proxy:</emphasis> List of locations that do not require proxy
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						Here is an example of a completed Repository Mirroring screen:
					</simpara>
					<simpara>
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/repo-mirror-details.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Repository mirroring details</phrase>
							</textobject>
						</inlinemediaobject>
					</simpara>
				</section>
				<section remap="_synchronize_now" xml:id="synchronize_now">
					<title>Synchronize now</title>
					<simpara>
						To perform an immediate mirroring operation, press the Sync Now button on the repository’s Mirroring tab. The logs are available on the Usage Logs tab:
					</simpara>
					<simpara>
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/repo-mirror-usage-logs.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Usage logs</phrase>
							</textobject>
						</inlinemediaobject>
					</simpara>
					<simpara>
						When the mirroring is complete, the images will appear in the Tags tab:
					</simpara>
					<simpara>
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/repo-mirror-tags.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Repository mirroring tags</phrase>
							</textobject>
						</inlinemediaobject>
					</simpara>
				</section>
			</section>
			<section xml:id="tag-patterns">
				<title>Tag Patterns</title>
				<simpara>
					As noted above, at least one Tag must be explicitly entered (ie. not a tag pattern) <emphasis>or</emphasis> the tag "latest" must exist in the report repository. (The tag "latest" will not be synced unless specified in the tag list.). This is required for Quay to get the list of tags in the remote repository to compare to the specified list to mirror.
				</simpara>
				<simpara>
					Pattern syntax
				</simpara>
				<informaltable colsep="1" frame="all" rowsep="1">
					<?dbhtml table-width="100%"?><?dbfo table-width="100%"?><?dblatex table-width="100%"?>
					<tgroup cols="2">
						<colspec colname="col_1" colwidth="213*"></colspec>
						<colspec colname="col_2" colwidth="213*"></colspec>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Pattern
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Description
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									*
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Matches all characters
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									?
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Matches any single character
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									[seq]
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Matches any character in <emphasis>seq</emphasis>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									[!seq]
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Matches any character not in <emphasis>seq</emphasis>
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<simpara>
					Example tag patterns
				</simpara>
				<informaltable colsep="1" frame="all" rowsep="1">
					<?dbhtml table-width="100%"?><?dbfo table-width="100%"?><?dblatex table-width="100%"?>
					<tgroup cols="2">
						<colspec colname="col_1" colwidth="213*"></colspec>
						<colspec colname="col_2" colwidth="213*"></colspec>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Example Pattern
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Example Matches
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									v3*
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									v32, v3.1, v3.2, v3.2-4beta, v3.3
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									v3.*
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									v3.1, v3.2, v3.2-4beta
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									v3.?
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									v3.1, v3.2, v3.3
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									v3.[12]
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									v3.1, v3.2
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									v3.[12]*
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									v3.1, v3.2, v3.2-4beta
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									v3.[!1]*
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									v3.2, v3.2-4beta, v3.3
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
			</section>
		</section>
		<section remap="_deploying_clair_v4" xml:id="deploying_clair_v4">
			<title>Deploying Clair V4</title>
			<simpara>
				Clair is an application for parsing image contents and reporting vulnerabilities affecting the contents. This is performed via static analysis and not at runtime. Clair’s analysis is broken into three distinct parts:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis role="strong">Indexing:</emphasis> Indexing starts with submitting a Manifest to Clair. On receipt, Clair will fetch layers, scan their contents, and return an intermediate representation called an IndexReport. Manifests are Clair’s representation of a container image. Clair leverages the fact that OCI Manifests and Layers are content-addressed to reduce duplicated work. Once a Manifest is indexed, the IndexReport is persisted for later retrieval.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Matching:</emphasis> Matching takes an IndexReport and correlates vulnerabilities affecting the manifest that the report represents. Clair is continually ingesting new security data and a request to the matcher will always provide you with the most up to date vulnerability analysis of an IndexReport.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Notifications:</emphasis> Clair implements a notification service. When new vulnerabilities are discovered, the notifier service will determine if these vulnerabilities affect any indexed Manifests. The notifier will then take action according to its configuration.
					</simpara>
				</listitem>
			</itemizedlist>
			<section remap="_deploying_a_separate_database_for_clair" xml:id="deploying_a_separate_database_for_clair">
				<title>Deploying a separate database for Clair</title>
				<simpara>
					Clair requires a Postgres database. You can share a common database between Quay and Clair if Quay is also using Postgres, but in this example a separate, Clair-specific database is deployed.
				</simpara>
				<simpara>
					In this proof-of-concept scenario, you will use a directory on the local file system to persist database data.
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							In the installation folder, denoted here by the variable $QUAY, create a directory for the Clair database data and set the permissions appropriately:
						</simpara>
						
<literallayout class="monospaced">$ mkdir -p $QUAY/postgres-clairv4
$ setfacl -m u:26:-wx $QUAY/postgres-clairv4</literallayout>
					</listitem>
					<listitem>
						<simpara>
							Use podman to run the Postgres container, specifying the username, password, database name and port, together with the volume definition for database data. As the standard Postgres port, <literal>5432</literal>, is already in use by the Quay deployment, expose a different port, in this instance <literal>5433</literal>:
						</simpara>
						
<literallayout class="monospaced">$ sudo podman run -d --rm --name postgresql-clairv4 \
  -e POSTGRESQL_USER=clairuser \
  -e POSTGRESQL_PASSWORD=clairpass \
  -e POSTGRESQL_DATABASE=clair \
  -e POSTGRESQL_ADMIN_PASSWORD=adminpass \
  -p 5433:5432 \
  -v $QUAY/postgres-clairv4:/var/lib/pgsql/data:Z \
  registry.redhat.io/rhel8/postgresql-10:1</literallayout>
					</listitem>
					<listitem>
						<simpara>
							Ensure that the Postgres <literal>uuid-ossp</literal> module is installed, as it is required by Clair:
						</simpara>
						
<literallayout class="monospaced">$ sudo podman exec -it postgresql-clairv4 /bin/bash -c 'echo "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"" | psql -d clair -U postgres'</literallayout>
					</listitem>
				</itemizedlist>
			</section>
			<section remap="_quay_configuration_for_clair" xml:id="quay_configuration_for_clair">
				<title>Quay configuration for Clair</title>
				<simpara>
					Stop the Quay container if it is running, and restart it in configuration mode, loading the existing configuration as a volume:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman run --rm -it --name quay_config \
  -p 8080:8080 \
  -v $QUAY/config:/conf/stack:Z \
  registry.redhat.io/quay/quay-rhel8:v3.5.1 config secret</literallayout>
				<simpara>
					Log in to the configuration tool and enable scanning, in the Security Scanner section of the UI. Set the HTTP endpoint for Clair, using a port that is not already in use on the <literal>quay-server</literal> system, for example <literal>8081</literal>. Create a Clair pre-shared key (PSK) using the <literal>Generate PSK</literal> button, for example:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Security Scanner Endpoint:</emphasis> <literal>http://quay-server:8081</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Security Scanner PSK:</emphasis> <literal>MTU5YzA4Y2ZkNzJoMQ==</literal>
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The UI for setting the scanner data is shown in the following image:
				</simpara>
				<formalpara>
					<title>Security Scanner UI</title>
					<para>
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/poc-quay-scanner-config.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Security Scanner</phrase>
							</textobject>
						</inlinemediaobject>
					</para>
				</formalpara>
				<simpara>
					Validate and download the configuration and then stop the Quay container that is running the configuration editor. Extract the configuration bundle as before into the <literal>$QUAY/config</literal> directory.
				</simpara>
				
<literallayout class="monospaced">$ cp ~/Downloads/quay-config.tar.gz $QUAY/config
$ cd $QUAY/config
$ tar xvf quay-config.tar.gz</literallayout>
				<simpara>
					The Quay configuration file has been updated to contain the fields for the security scanner:
				</simpara>
				<formalpara>
					<title>$QUAY/config/config.yaml</title>
					<para>
						
<programlisting language="yaml" linenumbering="unnumbered">...
FEATURE_SECURITY_NOTIFICATIONS: false
FEATURE_SECURITY_SCANNER: true
...
SECURITY_SCANNER_INDEXING_INTERVAL: 30
SECURITY_SCANNER_V4_ENDPOINT: http://quay-server:8081
SECURITY_SCANNER_V4_PSK: MTU5YzA4Y2ZkNzJoMQ==
SERVER_HOSTNAME: quay-server:8080
...</programlisting>
					</para>
				</formalpara>
			</section>
			<section remap="_clair_configuration" xml:id="clair_configuration">
				<title>Clair configuration</title>
				<simpara>
					Detailed information on Clair configuration is available at <link xlink:href="https://github.com/quay/clair/blob/main/Documentation/reference/config.md">https://github.com/quay/clair/blob/main/Documentation/reference/config.md</link>. The following example provides a minimal configuration for use in a proof of concept deployment:
				</simpara>
				<formalpara>
					<title>/etc/clairv4/config/config.yaml</title>
					<para>
						
<programlisting language="yaml" linenumbering="unnumbered">http_listen_addr: :8081
introspection_addr: :8089
log_level: debug
indexer:
  connstring: host=quay-server port=5433 dbname=clair user=clairuser password=clairpass sslmode=disable
  scanlock_retry: 10
  layer_scan_concurrency: 5
  migrations: true
matcher:
  connstring: host=quay-server port=5433 dbname=clair user=clairuser password=clairpass sslmode=disable
  max_conn_pool: 100
  run: ""
  migrations: true
  indexer_addr: clair-indexer
notifier:
  connstring: host=quay-server port=5433 dbname=clair user=clairuser password=clairpass sslmode=disable
  delivery_interval: 1m
  poll_interval: 5m
  migrations: true
auth:
  psk:
    key: "MTU5YzA4Y2ZkNzJoMQ=="
    iss: ["quay"]
# tracing and metrics
trace:
  name: "jaeger"
  probability: 1
  jaeger:
    agent_endpoint: "localhost:6831"
    service_name: "clair"
metrics:
  name: "prometheus"</programlisting>
					</para>
				</formalpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>http_listen_addr</literal> is set to the port of the Clair HTTP endpoint that you specified in the Quay configuration tool, in this case <literal>:8081</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The Clair pre-shared key (PSK) that you generated in the Quay configuration tool is used for authentication, with the issuer, specified in the <literal>iss</literal> field, set to <literal>quay</literal>.
						</simpara>
					</listitem>
				</itemizedlist>
			</section>
			<section remap="_running_clair" xml:id="running_clair">
				<title>Running Clair</title>
				<simpara>
					Use the <literal>podman run</literal> command to run the Clair container, exposing the HTTP endpoint port that you specified in the configuration tool, in this case <literal>8081</literal>:
				</simpara>
				
<literallayout class="monospaced">sudo podman run -d --rm --name clairv4 \
  -p 8081:8081 -p 8089:8089 \
  -e CLAIR_CONF=/clair/config.yaml -e CLAIR_MODE=combo \
  -v /etc/clairv4/config:/clair:Z \
  registry.redhat.io/quay/clair-rhel8:v3.5.1</literallayout>
				<simpara>
					Now restart the Quay container, using the updated configuration file containing the scanner settings:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman run -d --rm -p 8080:8080  \
   --name=quay \
   -v $QUAY/config:/conf/stack:Z \
   -v $QUAY/storage:/datastorage:Z \
   registry.redhat.io/quay/quay-rhel8:v3.5.1</literallayout>
			</section>
			<section remap="_using_clair_security_scanning" xml:id="using_clair_security_scanning">
				<title>Using Clair security scanning</title>
				<simpara>
					From the command line, log in to the registry:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman login --tls-verify=false quay-server:8080
Username: quayadmin
Password:
Login Succeeded!</literallayout>
				<simpara>
					Pull, tag and push a sample image to the registry:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman pull ubuntu:20.04
$ sudo podman tag docker.io/library/ubuntu:20.04 quay-server:8080/quayadmin/ubuntu:20.04
$ sudo podman push --tls-verify=false quay-server:8080/quayadmin/ubuntu:20.04</literallayout>
				<simpara>
					The results from the security scanning can be seen in the Quay UI, as shown in the following images:
				</simpara>
				<formalpara>
					<title>Scanning summary</title>
					<para>
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/poc-clair-1.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Scanning summary</phrase>
							</textobject>
						</inlinemediaobject>
					</para>
				</formalpara>
				<formalpara>
					<title>Scanning details</title>
					<para>
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/poc-clair-2.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Scanning details</phrase>
							</textobject>
						</inlinemediaobject>
					</para>
				</formalpara>
			</section>
		</section>
		<section remap="_restarting_containers" xml:id="restarting_containers">
			<title>Restarting containers</title>
			<simpara>
				Because the <literal>--restart</literal> option is not fully supported by podman, you can configure <literal>podman</literal> as a systemd service, as described in <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/building_running_and_managing_containers/index#porting-containers-to-systemd-using-podman_building-running-and-managing-containers">Porting containers to systemd using Podman</link>
			</simpara>
			<section remap="_using_systemd_unit_files_with_podman" xml:id="using_systemd_unit_files_with_podman">
				<title>Using systemd unit files with Podman</title>
				<simpara>
					By default, Podman generates a unit file for existing containers or pods. You can generate more portable systemd unit files using the <literal>podman generate systemd --new</literal> command. The <literal>--new</literal> flag instructs Podman to generate unit files that create, start and remove containers.
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Create the systemd unit files from a running Red Hat Quay registry as follows:
						</simpara>
						
<literallayout class="monospaced">$ sudo podman generate systemd --new --files --name redis
$ sudo podman generate systemd --new --files --name postgresql-quay
$ sudo podman generate systemd --new --files --name quay
$ sudo podman generate systemd --new --files --name postgresql-clairv4
$ sudo podman generate systemd --new --files --name clairv4</literallayout>
					</listitem>
					<listitem>
						<simpara>
							Copy the unit files to <literal>/usr/lib/systemd/system</literal> for installing them as a root user:
						</simpara>
						
<literallayout class="monospaced">$ sudo cp -Z container-redis.service /usr/lib/systemd/system
$ sudo cp -Z container-postgresql-quay.service /usr/lib/systemd/system
$ sudo cp -Z container-quay.service /usr/lib/systemd/system
$ sudo cp -Z container-postgresql-clairv4.service /usr/lib/systemd/system
$ sudo cp -Z container-clairv4.service /usr/lib/systemd/system</literallayout>
					</listitem>
					<listitem>
						<simpara>
							Reload systemd manager configuration:
						</simpara>
						
<literallayout class="monospaced">$ sudo systemctl daemon-reload</literallayout>
					</listitem>
					<listitem>
						<simpara>
							Enable the services and start them at boot time:
						</simpara>
						
<literallayout class="monospaced">$ sudo systemctl enable --now container-redis.service
$ sudo systemctl enable --now container-postgresql-quay.service
$ sudo systemctl enable --now container-quay.service
$ sudo systemctl enable --now container-postgresql-clairv4.service
$ sudo systemctl enable --now container-clairv4.service</literallayout>
					</listitem>
				</itemizedlist>
			</section>
			<section remap="_starting_stopping_and_checking_the_status_of_services" xml:id="starting_stopping_and_checking_the_status_of_services">
				<title>Starting, stopping and checking the status of services</title>
				<itemizedlist>
					<listitem>
						<simpara>
							Check the status of the Quay components:
						</simpara>
						
<literallayout class="monospaced">$ sudo systemctl status container-redis.service
$ sudo systemctl status container-postgresql-quay.service
$ sudo systemctl status container-quay.service
$ sudo systemctl status container-postgresql-clairv4.service
$ sudo systemctl status container-clairv4.service</literallayout>
					</listitem>
					<listitem>
						<simpara>
							To stop the Quay component services:
						</simpara>
						
<literallayout class="monospaced">$ sudo systemctl stop container-redis.service
$ sudo systemctl stop container-postgresql-quay.service
$ sudo systemctl stop container-quay.service
$ sudo systemctl stop container-postgresql-clairv4.service
$ sudo systemctl stop container-clairv4.service</literallayout>
					</listitem>
					<listitem>
						<simpara>
							To start the Quay component services:
						</simpara>
						
<literallayout class="monospaced">$ sudo systemctl start container-redis.service
$ sudo systemctl start container-postgresql-quay.service
$ sudo systemctl start container-quay.service
$ sudo systemctl start container-postgresql-clairv4.service
$ sudo systemctl start container-clairv4.service</literallayout>
					</listitem>
				</itemizedlist>
			</section>
			<section remap="_testing_restart_after_reboot" xml:id="testing_restart_after_reboot">
				<title>Testing restart after reboot</title>
				<simpara>
					Once you have the services configured and enabled, reboot the system. When the system has re-started, use <literal>podman ps</literal> to check that all the containers for the Quay components have been restarted:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman ps -a
CONTAINER ID  IMAGE                                       COMMAND         CREATED         STATUS             PORTS                   NAMES
4e87c7889246  registry.redhat.io/rhel8/postgresql-10:1    run-postgresql  19 seconds ago  Up 18 seconds ago  0.0.0.0:5432-&gt;5432/tcp  postgresql-quay
b8fbac1920d4  registry.redhat.io/rhel8/redis-5:1          run-redis       19 seconds ago  Up 18 seconds ago  0.0.0.0:6379-&gt;6379/tcp  redis
d959d5bf7a24  registry.redhat.io/rhel8/postgresql-10:1    run-postgresql  18 seconds ago  Up 18 seconds ago  0.0.0.0:5433-&gt;5432/tcp  postgresql-clairv4
e75ff8651dbd  registry.redhat.io/quay/clair-rhel8:v3.4.0                  18 seconds ago  Up 17 seconds ago  0.0.0.0:8081-&gt;8080/tcp  clairv4</literallayout>
				<simpara>
					In this instance, the Quay container itself has failed to start up. This is due to the fact that, when security scanning is enabled in Quay, it tries to connect to Clair on startup. However, Clair has not finished initializing and cannot accept connections and, as a result, Quay terminates immediately. To overcome this issue, you need to configure the Quay service to have a dependency on the Clair service, as shown in the following section.
				</simpara>
			</section>
			<section remap="_configuring_quay_s_dependency_on_clair" xml:id="configuring_quay_s_dependency_on_clair">
				<title>Configuring Quay’s dependency on Clair</title>
				<simpara>
					In the <literal>systemd</literal> service file for Quay, set up a dependency on the Clair service in the <literal>[Unit]</literal> section by setting <literal>After=container-clairv4.service</literal>. To give the Clair container time to initialize, add a delay in the <literal>[Service]</literal> section, for example <literal>RestartSec=30</literal>. Here is an example of the modified Quay file, after configuring the dependency on Clair:
				</simpara>
				<formalpara>
					<title>/usr/lib/systemd/system/container-quay.service</title>
					<para>
						
<literallayout class="monospaced"># container-quay.service
# autogenerated by Podman 2.0.5
# Tue Feb 16 17:02:26 GMT 2021

[Unit]
Description=Podman container-quay.service
Documentation=man:podman-generate-systemd(1)
Wants=network.target
After=container-clairv4.service

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
RestartSec=30
ExecStartPre=/bin/rm -f %t/container-quay.pid %t/container-quay.ctr-id
ExecStart=/usr/bin/podman run --conmon-pidfile %t/container-quay.pid --cidfile %t/container-quay.ctr-id --cgroups=no-conmon -d --rm -p 8080:8080 --name=quay -v /home/user1/quay/config:/conf/stack:Z -v /home/user1/quay/storage:/datastorage:Z registry.redhat.io/quay/quay-rhel8:v3.4.0
ExecStop=/usr/bin/podman stop --ignore --cidfile %t/container-quay.ctr-id -t 10
ExecStopPost=/usr/bin/podman rm --ignore -f --cidfile %t/container-quay.ctr-id
PIDFile=%t/container-quay.pid
KillMode=none
Type=forking

[Install]
WantedBy=multi-user.target default.target</literallayout>
					</para>
				</formalpara>
				<simpara>
					Once you have updated the Quay service configuration, reboot the server and immediately run <literal>podman ps</literal>:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman ps -a
CONTAINER ID  IMAGE                                       COMMAND         CREATED         STATUS             PORTS                   NAMES
4e87c7889246  registry.redhat.io/rhel8/postgresql-10:1    run-postgresql  29 seconds ago  Up 28 seconds ago  0.0.0.0:5432-&gt;5432/tcp  postgresql-quay
b8fbac1920d4  registry.redhat.io/rhel8/redis-5:1          run-redis       29 seconds ago  Up 28 seconds ago  0.0.0.0:6379-&gt;6379/tcp  redis
d959d5bf7a24  registry.redhat.io/rhel8/postgresql-10:1    run-postgresql  28 seconds ago  Up 28 seconds ago  0.0.0.0:5433-&gt;5432/tcp  postgresql-clairv4
e75ff8651dbd  registry.redhat.io/quay/clair-rhel8:v3.4.0                  28 seconds ago  Up 27 seconds ago  0.0.0.0:8081-&gt;8080/tcp  clairv4</literallayout>
				<simpara>
					Initially, the Quay container will not be available, but once the <literal>RestartSec</literal> delay has expired, it should start up:
				</simpara>
				
<literallayout class="monospaced">$ sudo podman ps -a
CONTAINER ID  IMAGE                                       COMMAND         CREATED         STATUS             PORTS                   NAMES
4e87c7889246  registry.redhat.io/rhel8/postgresql-10:1    run-postgresql  35 seconds ago  Up 34 seconds ago  0.0.0.0:5432-&gt;5432/tcp  postgresql-quay
ab9f0e6ad7c3  registry.redhat.io/quay/quay-rhel8:v3.4.0   registry        3 seconds ago   Up 2 seconds ago   0.0.0.0:8080-&gt;8080/tcp  quay
b8fbac1920d4  registry.redhat.io/rhel8/redis-5:1          run-redis       35 seconds ago  Up 34 seconds ago  0.0.0.0:6379-&gt;6379/tcp  redis
d959d5bf7a24  registry.redhat.io/rhel8/postgresql-10:1    run-postgresql  34 seconds ago  Up 34 seconds ago  0.0.0.0:5433-&gt;5432/tcp  postgresql-clairv4
e75ff8651dbd  registry.redhat.io/quay/clair-rhel8:v3.4.0                  34 seconds ago  Up 33 seconds ago  0.0.0.0:8081-&gt;8080/tcp  clairv4</literallayout>
				<simpara>
					The <literal>CREATED</literal> field for the quay container shows the 30 second difference in creation time, as configured in the service definition.
				</simpara>
				<simpara>
					Log in to the Red Hat Quay registry at <literal>quay-server:8080</literal> to check that everything has restarted correctly.
				</simpara>
			</section>
		</section>
	</chapter>
	<chapter remap="_next_steps" xml:id="next_steps">
		<title>Next steps</title>
		<simpara>
			This document shows how to configure and deploy a proof-of-concept version of Red Hat Quay. For more information on deploying to a production environment, see the guide "Deploy Red Hat Quay - High Availability".
		</simpara>
		<simpara>
			The "Use Red Hat Quay" guide shows you how to:
		</simpara>
		<itemizedlist>
			<listitem>
				<simpara>
					Add users and repositories
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Use tags
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Automatically build Dockerfiles with build workers
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Set up build triggers
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Add notifications for repository events
				</simpara>
			</listitem>
		</itemizedlist>
		<simpara>
			The "Manage Red Hat Quay" guide shows you how to:
		</simpara>
		<itemizedlist>
			<listitem>
				<simpara>
					Use SSL and TLS
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Enable security scanning with Clair
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Use repository mirroring
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Configure LDAP authentication
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Use georeplication of storage
				</simpara>
			</listitem>
		</itemizedlist>
	</chapter>
</book>

